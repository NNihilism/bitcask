// Code generated by Kitex v0.4.4. DO NOT EDIT.

package nodeservice

import (
	node "bitcaskDB/internal/bitcask_master_slaves/node/kitex_gen/node"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return nodeServiceServiceInfo
}

var nodeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NodeService"
	handlerType := (*node.NodeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendSlaveof":   kitex.NewMethodInfo(sendSlaveofHandler, newNodeServiceSendSlaveofArgs, newNodeServiceSendSlaveofResult, false),
		"RegisterSlave": kitex.NewMethodInfo(registerSlaveHandler, newNodeServiceRegisterSlaveArgs, newNodeServiceRegisterSlaveResult, false),
		"PSync":         kitex.NewMethodInfo(pSyncHandler, newNodeServicePSyncArgs, newNodeServicePSyncResult, false),
		"OpLogEntry":    kitex.NewMethodInfo(opLogEntryHandler, newNodeServiceOpLogEntryArgs, newNodeServiceOpLogEntryResult, false),
		"Ping":          kitex.NewMethodInfo(pingHandler, newNodeServicePingArgs, newNodeServicePingResult, false),
		"Info":          kitex.NewMethodInfo(infoHandler, newNodeServiceInfoArgs, newNodeServiceInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "node",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendSlaveofHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceSendSlaveofArgs)
	realResult := result.(*node.NodeServiceSendSlaveofResult)
	success, err := handler.(node.NodeService).SendSlaveof(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceSendSlaveofArgs() interface{} {
	return node.NewNodeServiceSendSlaveofArgs()
}

func newNodeServiceSendSlaveofResult() interface{} {
	return node.NewNodeServiceSendSlaveofResult()
}

func registerSlaveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceRegisterSlaveArgs)
	realResult := result.(*node.NodeServiceRegisterSlaveResult)
	success, err := handler.(node.NodeService).RegisterSlave(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceRegisterSlaveArgs() interface{} {
	return node.NewNodeServiceRegisterSlaveArgs()
}

func newNodeServiceRegisterSlaveResult() interface{} {
	return node.NewNodeServiceRegisterSlaveResult()
}

func pSyncHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServicePSyncArgs)
	realResult := result.(*node.NodeServicePSyncResult)
	success, err := handler.(node.NodeService).PSync(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServicePSyncArgs() interface{} {
	return node.NewNodeServicePSyncArgs()
}

func newNodeServicePSyncResult() interface{} {
	return node.NewNodeServicePSyncResult()
}

func opLogEntryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceOpLogEntryArgs)
	realResult := result.(*node.NodeServiceOpLogEntryResult)
	success, err := handler.(node.NodeService).OpLogEntry(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceOpLogEntryArgs() interface{} {
	return node.NewNodeServiceOpLogEntryArgs()
}

func newNodeServiceOpLogEntryResult() interface{} {
	return node.NewNodeServiceOpLogEntryResult()
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*node.NodeServicePingResult)
	success, err := handler.(node.NodeService).Ping(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServicePingArgs() interface{} {
	return node.NewNodeServicePingArgs()
}

func newNodeServicePingResult() interface{} {
	return node.NewNodeServicePingResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*node.NodeServiceInfoResult)
	success, err := handler.(node.NodeService).Info(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceInfoArgs() interface{} {
	return node.NewNodeServiceInfoArgs()
}

func newNodeServiceInfoResult() interface{} {
	return node.NewNodeServiceInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendSlaveof(ctx context.Context, req *node.SendSlaveofRequest) (r *node.SendSlaveofResponse, err error) {
	var _args node.NodeServiceSendSlaveofArgs
	_args.Req = req
	var _result node.NodeServiceSendSlaveofResult
	if err = p.c.Call(ctx, "SendSlaveof", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterSlave(ctx context.Context, req *node.RegisterSlaveRequest) (r *node.RegisterSlaveResponse, err error) {
	var _args node.NodeServiceRegisterSlaveArgs
	_args.Req = req
	var _result node.NodeServiceRegisterSlaveResult
	if err = p.c.Call(ctx, "RegisterSlave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PSync(ctx context.Context, req *node.PSyncRequest) (r *node.PSyncResponse, err error) {
	var _args node.NodeServicePSyncArgs
	_args.Req = req
	var _result node.NodeServicePSyncResult
	if err = p.c.Call(ctx, "PSync", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OpLogEntry(ctx context.Context, req *node.LogEntryRequest) (r *node.LogEntryRequest, err error) {
	var _args node.NodeServiceOpLogEntryArgs
	_args.Req = req
	var _result node.NodeServiceOpLogEntryResult
	if err = p.c.Call(ctx, "OpLogEntry", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Ping(ctx context.Context) (r *node.PingResponse, err error) {
	var _args node.NodeServicePingArgs
	var _result node.NodeServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context) (r *node.InfoResponse, err error) {
	var _args node.NodeServiceInfoArgs
	var _result node.NodeServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
