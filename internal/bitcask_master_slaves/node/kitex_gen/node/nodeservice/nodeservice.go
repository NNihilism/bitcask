// Code generated by Kitex v0.4.4. DO NOT EDIT.

package nodeservice

import (
	node "bitcaskDB/internal/bitcask_master_slaves/node/kitex_gen/node"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return nodeServiceServiceInfo
}

var nodeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NodeService"
	handlerType := (*node.NodeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ReplFinishNotify": kitex.NewMethodInfo(replFinishNotifyHandler, newNodeServiceReplFinishNotifyArgs, newNodeServiceReplFinishNotifyResult, false),
		"IsAlive":          kitex.NewMethodInfo(isAliveHandler, newNodeServiceIsAliveArgs, newNodeServiceIsAliveResult, false),
		"RegisterSlave":    kitex.NewMethodInfo(registerSlaveHandler, newNodeServiceRegisterSlaveArgs, newNodeServiceRegisterSlaveResult, false),
		"PSyncReq":         kitex.NewMethodInfo(pSyncReqHandler, newNodeServicePSyncReqArgs, newNodeServicePSyncReqResult, false),
		"PSyncReady":       kitex.NewMethodInfo(pSyncReadyHandler, newNodeServicePSyncReadyArgs, newNodeServicePSyncReadyResult, false),
		"OpLogEntry":       kitex.NewMethodInfo(opLogEntryHandler, newNodeServiceOpLogEntryArgs, newNodeServiceOpLogEntryResult, false),
		"SendSlaveof":      kitex.NewMethodInfo(sendSlaveofHandler, newNodeServiceSendSlaveofArgs, newNodeServiceSendSlaveofResult, false),
		"Info":             kitex.NewMethodInfo(infoHandler, newNodeServiceInfoArgs, newNodeServiceInfoResult, false),
		"GetAllNodesInfo":  kitex.NewMethodInfo(getAllNodesInfoHandler, newNodeServiceGetAllNodesInfoArgs, newNodeServiceGetAllNodesInfoResult, false),
		"Ping":             kitex.NewMethodInfo(pingHandler, newNodeServicePingArgs, newNodeServicePingResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "node",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func replFinishNotifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceReplFinishNotifyArgs)
	realResult := result.(*node.NodeServiceReplFinishNotifyResult)
	success, err := handler.(node.NodeService).ReplFinishNotify(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newNodeServiceReplFinishNotifyArgs() interface{} {
	return node.NewNodeServiceReplFinishNotifyArgs()
}

func newNodeServiceReplFinishNotifyResult() interface{} {
	return node.NewNodeServiceReplFinishNotifyResult()
}

func isAliveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*node.NodeServiceIsAliveResult)
	success, err := handler.(node.NodeService).IsAlive(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newNodeServiceIsAliveArgs() interface{} {
	return node.NewNodeServiceIsAliveArgs()
}

func newNodeServiceIsAliveResult() interface{} {
	return node.NewNodeServiceIsAliveResult()
}

func registerSlaveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceRegisterSlaveArgs)
	realResult := result.(*node.NodeServiceRegisterSlaveResult)
	success, err := handler.(node.NodeService).RegisterSlave(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceRegisterSlaveArgs() interface{} {
	return node.NewNodeServiceRegisterSlaveArgs()
}

func newNodeServiceRegisterSlaveResult() interface{} {
	return node.NewNodeServiceRegisterSlaveResult()
}

func pSyncReqHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServicePSyncReqArgs)
	realResult := result.(*node.NodeServicePSyncReqResult)
	success, err := handler.(node.NodeService).PSyncReq(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServicePSyncReqArgs() interface{} {
	return node.NewNodeServicePSyncReqArgs()
}

func newNodeServicePSyncReqResult() interface{} {
	return node.NewNodeServicePSyncReqResult()
}

func pSyncReadyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServicePSyncReadyArgs)
	realResult := result.(*node.NodeServicePSyncReadyResult)
	success, err := handler.(node.NodeService).PSyncReady(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServicePSyncReadyArgs() interface{} {
	return node.NewNodeServicePSyncReadyArgs()
}

func newNodeServicePSyncReadyResult() interface{} {
	return node.NewNodeServicePSyncReadyResult()
}

func opLogEntryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceOpLogEntryArgs)
	realResult := result.(*node.NodeServiceOpLogEntryResult)
	success, err := handler.(node.NodeService).OpLogEntry(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceOpLogEntryArgs() interface{} {
	return node.NewNodeServiceOpLogEntryArgs()
}

func newNodeServiceOpLogEntryResult() interface{} {
	return node.NewNodeServiceOpLogEntryResult()
}

func sendSlaveofHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceSendSlaveofArgs)
	realResult := result.(*node.NodeServiceSendSlaveofResult)
	success, err := handler.(node.NodeService).SendSlaveof(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceSendSlaveofArgs() interface{} {
	return node.NewNodeServiceSendSlaveofArgs()
}

func newNodeServiceSendSlaveofResult() interface{} {
	return node.NewNodeServiceSendSlaveofResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*node.NodeServiceInfoResult)
	success, err := handler.(node.NodeService).Info(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceInfoArgs() interface{} {
	return node.NewNodeServiceInfoArgs()
}

func newNodeServiceInfoResult() interface{} {
	return node.NewNodeServiceInfoResult()
}

func getAllNodesInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*node.NodeServiceGetAllNodesInfoArgs)
	realResult := result.(*node.NodeServiceGetAllNodesInfoResult)
	success, err := handler.(node.NodeService).GetAllNodesInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServiceGetAllNodesInfoArgs() interface{} {
	return node.NewNodeServiceGetAllNodesInfoArgs()
}

func newNodeServiceGetAllNodesInfoResult() interface{} {
	return node.NewNodeServiceGetAllNodesInfoResult()
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*node.NodeServicePingResult)
	success, err := handler.(node.NodeService).Ping(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNodeServicePingArgs() interface{} {
	return node.NewNodeServicePingArgs()
}

func newNodeServicePingResult() interface{} {
	return node.NewNodeServicePingResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ReplFinishNotify(ctx context.Context, req *node.ReplFinishNotifyReq) (r bool, err error) {
	var _args node.NodeServiceReplFinishNotifyArgs
	_args.Req = req
	var _result node.NodeServiceReplFinishNotifyResult
	if err = p.c.Call(ctx, "ReplFinishNotify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsAlive(ctx context.Context) (r bool, err error) {
	var _args node.NodeServiceIsAliveArgs
	var _result node.NodeServiceIsAliveResult
	if err = p.c.Call(ctx, "IsAlive", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterSlave(ctx context.Context, req *node.RegisterSlaveRequest) (r *node.RegisterSlaveResponse, err error) {
	var _args node.NodeServiceRegisterSlaveArgs
	_args.Req = req
	var _result node.NodeServiceRegisterSlaveResult
	if err = p.c.Call(ctx, "RegisterSlave", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PSyncReq(ctx context.Context, req *node.PSyncRequest) (r *node.PSyncResponse, err error) {
	var _args node.NodeServicePSyncReqArgs
	_args.Req = req
	var _result node.NodeServicePSyncReqResult
	if err = p.c.Call(ctx, "PSyncReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PSyncReady(ctx context.Context, req *node.PSyncRequest) (r *node.PSyncResponse, err error) {
	var _args node.NodeServicePSyncReadyArgs
	_args.Req = req
	var _result node.NodeServicePSyncReadyResult
	if err = p.c.Call(ctx, "PSyncReady", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OpLogEntry(ctx context.Context, req *node.LogEntryRequest) (r *node.LogEntryResponse, err error) {
	var _args node.NodeServiceOpLogEntryArgs
	_args.Req = req
	var _result node.NodeServiceOpLogEntryResult
	if err = p.c.Call(ctx, "OpLogEntry", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendSlaveof(ctx context.Context, req *node.SendSlaveofRequest) (r *node.SendSlaveofResponse, err error) {
	var _args node.NodeServiceSendSlaveofArgs
	_args.Req = req
	var _result node.NodeServiceSendSlaveofResult
	if err = p.c.Call(ctx, "SendSlaveof", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context) (r *node.InfoResponse, err error) {
	var _args node.NodeServiceInfoArgs
	var _result node.NodeServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllNodesInfo(ctx context.Context, req *node.GetAllNodesInfoReq) (r *node.GetAllNodesInfoResp, err error) {
	var _args node.NodeServiceGetAllNodesInfoArgs
	_args.Req = req
	var _result node.NodeServiceGetAllNodesInfoResult
	if err = p.c.Call(ctx, "GetAllNodesInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Ping(ctx context.Context) (r *node.PingResponse, err error) {
	var _args node.NodeServicePingArgs
	var _result node.NodeServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
