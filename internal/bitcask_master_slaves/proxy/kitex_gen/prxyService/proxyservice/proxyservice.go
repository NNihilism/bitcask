// Code generated by Kitex v0.4.4. DO NOT EDIT.

package proxyservice

import (
	prxyservice "bitcaskDB/internal/bitcask_master_slaves/proxy/kitex_gen/prxyService"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return proxyServiceServiceInfo
}

var proxyServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProxyService"
	handlerType := (*prxyservice.ProxyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Ping":       kitex.NewMethodInfo(pingHandler, newProxyServicePingArgs, newProxyServicePingResult, false),
		"OpLogEntry": kitex.NewMethodInfo(opLogEntryHandler, newProxyServiceOpLogEntryArgs, newProxyServiceOpLogEntryResult, false),
		"Proxy":      kitex.NewMethodInfo(proxyHandler, newProxyServiceProxyArgs, newProxyServiceProxyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "prxyservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*prxyservice.ProxyServicePingArgs)
	realResult := result.(*prxyservice.ProxyServicePingResult)
	success, err := handler.(prxyservice.ProxyService).Ping(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newProxyServicePingArgs() interface{} {
	return prxyservice.NewProxyServicePingArgs()
}

func newProxyServicePingResult() interface{} {
	return prxyservice.NewProxyServicePingResult()
}

func opLogEntryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*prxyservice.ProxyServiceOpLogEntryArgs)
	realResult := result.(*prxyservice.ProxyServiceOpLogEntryResult)
	success, err := handler.(prxyservice.ProxyService).OpLogEntry(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProxyServiceOpLogEntryArgs() interface{} {
	return prxyservice.NewProxyServiceOpLogEntryArgs()
}

func newProxyServiceOpLogEntryResult() interface{} {
	return prxyservice.NewProxyServiceOpLogEntryResult()
}

func proxyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*prxyservice.ProxyServiceProxyArgs)
	realResult := result.(*prxyservice.ProxyServiceProxyResult)
	success, err := handler.(prxyservice.ProxyService).Proxy(ctx, realArg.MasterAddr)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newProxyServiceProxyArgs() interface{} {
	return prxyservice.NewProxyServiceProxyArgs()
}

func newProxyServiceProxyResult() interface{} {
	return prxyservice.NewProxyServiceProxyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Ping(ctx context.Context, req bool) (r bool, err error) {
	var _args prxyservice.ProxyServicePingArgs
	_args.Req = req
	var _result prxyservice.ProxyServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OpLogEntry(ctx context.Context, req *prxyservice.LogEntryRequest) (r *prxyservice.LogEntryResponse, err error) {
	var _args prxyservice.ProxyServiceOpLogEntryArgs
	_args.Req = req
	var _result prxyservice.ProxyServiceOpLogEntryResult
	if err = p.c.Call(ctx, "OpLogEntry", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Proxy(ctx context.Context, masterAddr string) (r bool, err error) {
	var _args prxyservice.ProxyServiceProxyArgs
	_args.MasterAddr = masterAddr
	var _result prxyservice.ProxyServiceProxyResult
	if err = p.c.Call(ctx, "Proxy", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
